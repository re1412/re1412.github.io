---
layout: post
title: 좋은 객체 지향 설계의 5가지 원칙 SOLID
date: 2022-01-13 10:03:00 +0900
category: java
---
# 좋은 객체 지향 설계의 5가지 원칙 SOLID


# SRP(Single Responsibility Principle) : 단일 책임 원칙
> 한 클래스는 하나의 책임만 가져야 함
> 중요한 기준은 변경(변경이 있을때 파급 효과가 적으면 단일 책임 원칙을 잘 따름)
>> 예) UI 변경, 객체 생성과 사용을 분리


# OCP(Open/Closed Principle) : 개방-폐쇄 원칙
> 소프트웨어 요소는 확장에는 연ㄹ려 있으나 변경에는 닫혀 있어야 함 
> 다형성 활용
> 인터페이스를 구현한 새로운 클래스를 하나 만들어서 새로운 기능을 구현


# LSP(Liskov Substitution principle) : 리스코프 치환 원칙
> 프로그램 객체는 프로그램의 정확성을 깨뜨리지 않으면서 하위 타입의 인스턴스로 바꿀 수 있어야 함
> 다형성에서 하위 클래스는 인터페이스 규약을 다 지켜야 한다는 것, 다형성을 지원하기 위한 원칙, 인터페이스를 구현한 구현체는 믿고 사용하려면 이 원칙이 필요
> 컴파일 성공과는 다른 이야기
>> 예) 자동차 엑셀을 밟으면 뒤로가게 구현이 가능하지만 느리더라도 앞으로 가게 구현해야함. 뒤로 가게 구현하면 리스코프 치환 원칙 위배


# ISP(Interface Segregation Principle) : 인터페이스 분리 원칙
> 특정 클라이언트를 위한 인터페이스 여러 개가 범용 인터페이스 하나보다 낫다
> 자동차 인터페이스 -> 운전 인터페이스, 정비 인터페이스로 분리
> 사용자 클라이언트 -> 운전자 클라이언트, 정비사 클라이언트로 분리
> 분리하면 정비 인터페이스 자체가 변해도 운전자 클라이언트에 영향을 주지 않음
> 인터페이스가 명확해지고, 대체 가능성이 높아짐


# DIP(Dependency Inversion Principle) : 의존관계 역전 원칙
> 프로그래머는 "추상화에 의존해야지, 구체화에 의존하면 안됨" 의존성 주입은 이 원칙을 따르는 방법 중 하나
> 클라이언트 코드가 구현 클래스를 바라보지 않고 인터페이스만 바라보라는 뜻
> 역할(Role)에 의존해야지 구현에 의존해서는 안됨


# 객체지향의 핵심은 다형성
# 다형성 만으로는 쉽게 OCP, DIP를 지킬 수 없음